{{if eq .config.Auto true}}
package {{.config.PackageName}}.service.auto;
{{else}}
package {{.config.PackageName}}.service;
{{end}}

import java.math.BigDecimal;
import java.util.List;
import java.util.Date;

import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;

import {{.config.PackageName}}.utils.*;
{{if eq .config.Auto true}}
import {{.config.PackageName}}.domain.auto.{{.backendObject.JavaBeanName}};
import {{.config.PackageName}}.domain.auto.{{.backendObject.JavaBeanName}}Query;
import {{.config.PackageName}}.dao.auto.{{.backendObject.JavaBeanName}}Mapper;
{{else}}
import {{.config.PackageName}}.domain.{{.backendObject.JavaBeanName}};
import {{.config.PackageName}}.domain.{{.backendObject.JavaBeanName}}Query;
import {{.config.PackageName}}.dao.{{.backendObject.JavaBeanName}}Mapper;
{{end}}

/**
 * {{.backendObject.Comment}}
 * @author {{.author}}
 * @date {{.date}}
 **/
@Service("{{.backendObject.JavaBeanNameLower}}Service")
@Slf4j
public class {{.backendObject.JavaBeanName}}Service {

    @Autowired
    private {{.backendObject.JavaBeanName}}Mapper {{.backendObject.JavaBeanNameLower}}Mapper;

    /**
     * 增加
     */
    public BasicResult add{{.backendObject.JavaBeanName}}({{.backendObject.JavaBeanName}} {{.backendObject.JavaBeanNameLower}}) {
        log.info("request {{.backendObject.JavaBeanName}}Service.add{{.backendObject.JavaBeanName}} param: {}",JSON.toJSONString({{.backendObject.JavaBeanNameLower}}));
        if ({{.backendObject.JavaBeanNameLower}} == null) {
            return BasicResult.newFailBasicResult("参数为空");
        }
        {{.backendObject.JavaBeanNameLower}}Mapper.insert({{.backendObject.JavaBeanNameLower}});
        return BasicResult.newSuccessBasicResult();
    }

    /**
     * 批量增加
     */
    public BasicResult addBatch(List<{{.backendObject.JavaBeanName}}> {{.backendObject.JavaBeanNameLower}}List){
        log.info("request {{.backendObject.JavaBeanName}}Service.addBatch size: {}",{{.backendObject.JavaBeanNameLower}}List.size());
        if ({{.backendObject.JavaBeanNameLower}}List == null || {{.backendObject.JavaBeanNameLower}}List.isEmpty()) {
            return BasicResult.newFailBasicResult("参数为空");
        }
        {{.backendObject.JavaBeanNameLower}}Mapper.insertBatch({{.backendObject.JavaBeanNameLower}}List);
        return BasicResult.newSuccessBasicResult();
    }

    /**
     * 没有则增加有则修改
     */
    public BasicResult addOrUpdate({{.backendObject.JavaBeanName}} {{.backendObject.JavaBeanNameLower}}) {
        log.info("request {{.backendObject.JavaBeanName}}Service.addOrUpdate param:{}",JSON.toJSONString({{.backendObject.JavaBeanNameLower}}));
        if ({{.backendObject.JavaBeanNameLower}} == null) {
            return BasicResult.newFailBasicResult("参数为空");
        }
        {{.backendObject.JavaBeanNameLower}}Mapper.insertOrUpdate({{.backendObject.JavaBeanNameLower}});
        return BasicResult.newSuccessBasicResult();
    }

    /**
     * 删除
     */
    public BasicResult deleteById(long id){
        log.info("request {{.backendObject.JavaBeanName}}Service.deleteBy param:{}",id);
        {{.backendObject.JavaBeanNameLower}}Mapper.deleteById(id);
        return BasicResult.newSuccessBasicResult();
    }

    /**
     * 根据id修改
     */
    public BasicResult update{{.backendObject.JavaBeanName}}ById({{.backendObject.JavaBeanName}} {{.backendObject.JavaBeanNameLower}}){
        log.info("request {{.backendObject.JavaBeanName}}Service.modify{{.backendObject.JavaBeanName}} param:{}",JSON.toJSONString({{.backendObject.JavaBeanNameLower}}));
        {{.backendObject.JavaBeanNameLower}}Mapper.update({{.backendObject.JavaBeanNameLower}});
        return BasicResult.newSuccessBasicResult();
    }

    /**
     * 批量修改
     */
    @Transactional
    public BasicResult updateBatch(List<{{.backendObject.JavaBeanName}}> {{.backendObject.JavaBeanNameLower}}List){
        log.info("request {{.backendObject.JavaBeanName}}Service.modifyBatch size:" + {{.backendObject.JavaBeanNameLower}}List.size());
        BasicResult result = new BasicResult();
        int count = 0;
        for ({{.backendObject.JavaBeanName}} {{.backendObject.JavaBeanNameLower}} : {{.backendObject.JavaBeanNameLower}}List) {
            count += {{.backendObject.JavaBeanNameLower}}Mapper.update({{.backendObject.JavaBeanNameLower}});
        }
        result.setCode(CodeEnum.SUCCESS.getCode());
        result.setMsg(String.valueOf(count));
        return result;
    }

    /**
     * 根据id查询
     */
    public {{.backendObject.JavaBeanName}} search{{.backendObject.JavaBeanName}}ById(Long id){
        return {{.backendObject.JavaBeanNameLower}}Mapper.findById(id);
    }

    /**
     * 根据条件查询
     */
    public ListResult<{{.backendObject.JavaBeanName}}> search{{.backendObject.JavaBeanName}}(Query<{{.backendObject.JavaBeanName}}Query> query){
        log.info("request {{.backendObject.JavaBeanName}}Service.search{{.backendObject.JavaBeanName}} param:{}",JSON.toJSONString(query));
        ListResult<{{.backendObject.JavaBeanName}}> result = new ListResult<>();
        List<{{.backendObject.JavaBeanName}}> list = {{.backendObject.JavaBeanNameLower}}Mapper.getAllList(query);
        result.setMsg("查询成功");
        result.setCode(CodeEnum.SUCCESS.getCode());
        result.setValues(list);
        return result;
    }

    /**
     * 根据条件分页查询
     */
    public PageListResult<{{.backendObject.JavaBeanName}}> searchPage{{.backendObject.JavaBeanName}}(PageQuery<{{.backendObject.JavaBeanName}}Query> pageQuery){
        log.info("request {{.backendObject.JavaBeanName}}Service.searchPage{{.backendObject.JavaBeanName}} param:" + JSON.toJSONString(pageQuery));
        PageListResult<{{.backendObject.JavaBeanName}}> result = new PageListResult<{{.backendObject.JavaBeanName}}>();
        long count = {{.backendObject.JavaBeanNameLower}}Mapper.getCount(pageQuery);
        PageQueryWrapper<{{.backendObject.JavaBeanName}}Query> wrapper = new PageQueryWrapper<{{.backendObject.JavaBeanName}}Query>(pageQuery.getPageNo(),pageQuery.getPageSize(),count,pageQuery.getQuery());
        List<{{.backendObject.JavaBeanName}}> itemList = {{.backendObject.JavaBeanNameLower}}Mapper.getPagenationList(wrapper);
        PageListResult<{{.backendObject.JavaBeanName}}> retValue = new PageListResult<>();
        result.setMsg("查询成功");
        result.setCode(CodeEnum.SUCCESS.getCode());
        result.setValues(itemList);
        long currentPage = pageQuery.getPageNo() > 1 ? pageQuery.getPageNo() : 1;
        Pagenation pagenation = new Pagenation(currentPage, count, pageQuery.getPageSize());
        result.setPagenation(pagenation);
        log.info("result {{.backendObject.JavaBeanName}}Service.searchPage{{.backendObject.JavaBeanName}} 处理结果:{}",JSON.toJSONString(result));
        return result;
    }

    /**
     * 根据条件分页查询 必须传id 针对大表的分页查询
     */
    public ListResult<{{.backendObject.JavaBeanName}}> searchPage{{.backendObject.JavaBeanName}}ById(IdPageQuery<{{.backendObject.JavaBeanName}}Query> idPageQuery){
        log.info("request {{.backendObject.JavaBeanName}}Service.searchPage{{.backendObject.JavaBeanName}}ById param:" + JSON.toJSONString(idPageQuery));
        ListResult<{{.backendObject.JavaBeanName}}> result = new ListResult<>();
        List<{{.backendObject.JavaBeanName}}> itemList = {{.backendObject.JavaBeanNameLower}}Mapper.getPagenationListById(idPageQuery);
        result.setMsg("查询成功");
        result.setCode(CodeEnum.SUCCESS.getCode());
        result.setValues(itemList);
        return result;
    }

    /**
     * 根据条件查询总条数
     */
    public GenericResult<Long> getTotalCount(Query<{{.backendObject.JavaBeanName}}Query> query) {
        log.info("request {{.backendObject.JavaBeanName}}Service.getTotalCount param:{}",JSON.toJSONString(query));
        GenericResult<Long> result = new GenericResult<>();
        long count = {{.backendObject.JavaBeanNameLower}}Mapper.getTotalCount(query);
        result.setMsg("查询成功");
        result.setCode(CodeEnum.SUCCESS.getCode());
        result.setValue(Long.valueOf(count));
        log.info("response {{.backendObject.JavaBeanName}}Service.getTotalCount : {}",JSON.toJSONString(result));
        return result;
    }

    /**
     * 分页总条数
     */
    public GenericResult<Long> getCount(PageQuery<{{.backendObject.JavaBeanName}}Query> pageQuery) {
        log.info("request {{.backendObject.JavaBeanName}}Service.getCount param:{}" + JSON.toJSONString(pageQuery));
        GenericResult<Long> result = new GenericResult<>();
        long count = {{.backendObject.JavaBeanNameLower}}Mapper.getCount(pageQuery);
        result.setMsg("查询成功");
        result.setCode(CodeEnum.SUCCESS.getCode());
        result.setValue(Long.valueOf(count));
        log.info("response {{.backendObject.JavaBeanName}}Service.getCount 处理结果:{}",JSON.toJSONString(result));
        return result;
    }

    {{range $i,$field := .backendObject.Columns}}
    {{if eq $field.SingleQuery 1}}
    /**
     *
     * @generated
     */
    public {{.backendObject.JavaBeanName}} search{{.backendObject.JavaBeanName}}By${field.JavaFieldNameUF}(String ${field.fieldName}#if($shardingField && $shardingField.fieldName != $field.fieldName), ${shardingField.showType} ${shardingField.fieldName}#end) {
        return {{.backendObject.JavaBeanNameLower}}Mapper.search{{.backendObject.JavaBeanName}}By${field.JavaFieldNameUF}(${field.fieldName}#if($shardingField && $shardingField.fieldName != $field.fieldName), ${shardingField.fieldName}#end);
    }
    {{end}}
    {{end}}

    {{range $i,$field := .backendObject.Columns}}
    {{if eq $field.SingleQuery 1}}
        /**
         *
         * @generated
         */
        public BasicResult update{{.backendObject.JavaBeanName}}By${field.JavaFieldNameUF}({{.backendObject.JavaBeanName}} {{.backendObject.JavaBeanNameLower}}) {
            log.info("request {{.backendObject.JavaBeanName}}Service.update{{.backendObject.JavaBeanName}}By${field.JavaFieldNameUF} param:{}",JSON.toJSONString({{.backendObject.JavaBeanNameLower}}));
            {{.backendObject.JavaBeanNameLower}}Mapper.update{{.backendObject.JavaBeanName}}By${field.JavaFieldNameUF}({{.backendObject.JavaBeanNameLower}});
            return BasicResult.newSuccessBasicResult();
        }
    {{end}}
    {{end}}

}
